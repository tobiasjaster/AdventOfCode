// Code generated by aocgen; DO NOT EDIT.
package year2022

import (
	"fmt"
)

type Day04 struct{}

func first[T, U any](val T, _ U) T {
    return val
}

func (p Day04) PartA(lines []string) any {
	var countGroup []int
	var numbers []int
	for i, line := range lines {
		if line == "" { continue }
		numbers = make([]int,4)
		fmt.Sscanf(line, "%d-%d,%d-%d", &numbers[0], &numbers[1], &numbers[2], &numbers[3])
		if numbers[0]<=numbers[2] && (numbers[1]-numbers[0])>=numbers[3]-numbers[2] && numbers[0]+(numbers[1]-numbers[0])>=numbers[3]{
			countGroup = append(countGroup, i)
			continue
		}
		if numbers[2]<=numbers[0] && (numbers[3]-numbers[2])>=(numbers[1]-numbers[0]) && numbers[2]+(numbers[3]-numbers[2])>=numbers[1]{
			countGroup = append(countGroup, i)
			continue
		}
	}
	return len(countGroup)
}

func (p Day04) PartB(lines []string) any {
	var countGroup []int
	var numbers []int
	for i, line := range lines {
		if line == "" { continue }
		numbers = make([]int,4)
		fmt.Sscanf(line, "%d-%d,%d-%d", &numbers[0], &numbers[1], &numbers[2], &numbers[3])
		if numbers[1]<numbers[2] || numbers[3]<numbers[0]{
			continue
		}
		countGroup = append(countGroup, i)
	}
	return len(countGroup)
}
