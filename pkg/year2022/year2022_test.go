// Code generated by aocgen; DO NOT EDIT.
package year2022

import (
	"testing"

	"AdventOfCode/pkg/aoc"
)

func Benchmark2022Day01(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 1)
	p := aoc.NewPuzzle(2022, 1)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day02(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 2)
	p := aoc.NewPuzzle(2022, 2)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day03(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 3)
	p := aoc.NewPuzzle(2022, 3)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day04(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 4)
	p := aoc.NewPuzzle(2022, 4)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day05(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 5)
	p := aoc.NewPuzzle(2022, 5)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day06(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 6)
	p := aoc.NewPuzzle(2022, 6)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day07(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 7)
	p := aoc.NewPuzzle(2022, 7)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day08(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 8)
	p := aoc.NewPuzzle(2022, 8)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day09(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 9)
	p := aoc.NewPuzzle(2022, 9)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day10(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 10)
	p := aoc.NewPuzzle(2022, 10)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day11(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 11)
	p := aoc.NewPuzzle(2022, 11)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day12(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 12)
	p := aoc.NewPuzzle(2022, 12)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day13(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 13)
	p := aoc.NewPuzzle(2022, 13)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day14(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 14)
	p := aoc.NewPuzzle(2022, 14)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day15(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 15)
	p := aoc.NewPuzzle(2022, 15)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day16(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 16)
	p := aoc.NewPuzzle(2022, 16)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day17(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 17)
	p := aoc.NewPuzzle(2022, 17)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
func Benchmark2022Day18(b *testing.B) {
	Init()
	input := aoc.TestInput(2022, 18)
	p := aoc.NewPuzzle(2022, 18)
	b.Run("PartA", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartA(input)
		}
	})
	b.Run("PartB", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			p.PartB(input)
		}
	})
}
