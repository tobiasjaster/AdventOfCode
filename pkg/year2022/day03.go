// Code generated by aocgen; DO NOT EDIT.
package year2022

type Day03 struct{}

func convertAscII(number int) int{
	if number <= 90 {
		return number - 65 + 27
	}
	if number > 90 {
		return number - 97 + 1
	}
	return number
}

func splitContent(rucksack []int) int{
	for _, item1 := range rucksack[:len(rucksack)/2]{
		for _, item2 := range rucksack[len(rucksack)/2:]{
			if item1 == item2 {
				return item1
			}
		}
	}
	return 0
}

func countBadges(rucksacks [][]int) int {
	var countBadges int
	for i := 0; i < len(rucksacks)/3; i++{
		var sameItem int = 0
		for _, item1 := range rucksacks[i*3+0]{
			if sameItem != 0 { break }
			for _, item2 := range rucksacks[i*3+1]{
				if sameItem != 0 { break }
				if item1 != item2 { continue }
				for _, item3 := range rucksacks[i*3+2]{
					if item2 == item3 {
						sameItem = item1
						break
					}
				}
			}
		}
		countBadges += sameItem
	}
	return countBadges
}

func (p Day03) PartA(lines []string) any {
	var count int = 0
	var rucksack []int
	for _, line := range lines {
		rucksack = make([]int,0)
		for _, char := range line {
			rucksack = append(rucksack,convertAscII(int(char)))
		}
		count += splitContent(rucksack)
	}
	return count
}

func (p Day03) PartB(lines []string) any {
	var rucksacks [][]int
	for _, line := range lines {
		var rucksack = make([]int,0)
		for _, char := range line {
			rucksack = append(rucksack,convertAscII(int(char)))
		}
		rucksacks = append(rucksacks, rucksack)
	}
	return countBadges(rucksacks)
}
