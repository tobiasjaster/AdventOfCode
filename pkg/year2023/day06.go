// Code generated by aocgen; DO NOT EDIT.
package year2023

import (
	// "fmt"
	"strconv"
	"strings"
)

type Day06 struct{}

type Race struct {
	Time int
	Distance int
}

func parseDay6A(lines []string) []Race {
	timeString,_ := strings.CutPrefix(lines[0], "Time:")
	distString,_ := strings.CutPrefix(lines[1], "Distance:")
	timeSlice := strings.Split(timeString," ")
	times := []int{}
	dists := []int{}
	for _, elem := range timeSlice {
		if elem == "" {
			continue
		}
		time, _ := strconv.Atoi(elem)
		times = append(times, time)
	}
	distSlice := strings.Split(distString," ")
	for _, elem := range distSlice {
		if elem == "" {
			continue
		}
		dist, _ := strconv.Atoi(elem)
		dists = append(dists, dist)
	}
	if len(times)!= len(dists) {
		panic("different length")
	}
	races := []Race{}
	for idx,time := range times {
		races = append(races, Race{
			Time: time,
			Distance: dists[idx],
		})
	}
	return races
}

func parseDay6B(lines []string) Race {
	timeString,_ := strings.CutPrefix(lines[0], "Time:")
	distString,_ := strings.CutPrefix(lines[1], "Distance:")
	timeSlice := strings.ReplaceAll(timeString," ","")
	distSlice := strings.ReplaceAll(distString," ","")
	time, _ := strconv.Atoi(timeSlice)
	dist, _ := strconv.Atoi(distSlice)
	return Race{
		Time: time,
		Distance: dist,
	}
}

func (p Day06) PartA(lines []string) any {
	races := parseDay6A(lines)
	counts := []int{}
	for _, race := range races {
		count := 0
		for i:=0;i<=race.Time;i++ {
			if (race.Time-i)*i>race.Distance {
				count = count+1
			}
		}
		counts = append(counts, count)
	}
	value := 1
	for _, count := range counts {
		value = value*count
	}
	return value
}

func (p Day06) PartB(lines []string) any {
	race := parseDay6B(lines)
	count := 0
	for i:=0;i<=race.Time;i++ {
		if (race.Time-i)*i>race.Distance {
			count = count+1
		}
	}
	return count
}
