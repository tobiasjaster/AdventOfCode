// Code generated by aocgen; DO NOT EDIT.
package year2023

import (
	"strconv"
	"strings"
)

type Day02 struct{}

func parseA(line string) (int, map[string]int) {
	line = strings.ReplaceAll(line,"\n","")
	line = strings.ReplaceAll(line,"\r","")
	maxColors := map[string]int{}
	lineSplit := strings.Split(line,": ")
	gameString,_ := strings.CutPrefix(lineSplit[0], "Game ")
	gameNr,_ := strconv.Atoi(gameString)

	handSplit := strings.Split(lineSplit[1], "; ")
	for _, hand := range handSplit {
		colors := strings.Split(hand, ", ")
		for _, color := range colors {
			colorSplit := strings.Split(color, " ")
			colorCnt,_ := strconv.Atoi(colorSplit[0])
			value,ok := maxColors[colorSplit[1]]
			if !ok {
				maxColors[colorSplit[1]] = colorCnt
				continue
			}
			if value < colorCnt {
				maxColors[colorSplit[1]] = colorCnt
			}
		}
	}
	return gameNr, maxColors
}

func (p Day02) PartA(lines []string) any {
	id := 0
	for _, line := range lines{
		nr, maxColors := parseA(line)
		possible := true
		if value,ok := maxColors["red"];ok{
			if value>12{
				possible = possible && false
			}
		}
		if value,ok := maxColors["green"];ok{
			if value>13{
				possible = possible && false
			}
		}
		if value,ok := maxColors["blue"];ok{
			if value>14{
				possible = possible && false
			}
		}
		if possible {
			id = id+nr
		}
	}

	return id
}

func (p Day02) PartB(lines []string) any {
	powers := 0
	for _, line := range lines{
		_, maxColors := parseA(line)
		power := 1
		for _,value := range maxColors {
			power = power*value
		}
		powers = powers+power
	}
	return powers
}
